name: Build and Release to Google Play & GitHub

on:
  workflow_dispatch: # Permite disparo manual com inputs (ex: para qual faixa)
    inputs:
      play_track:
        description: 'Google Play Track (internal, alpha, beta, production)'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production
      git_release_notes:
        description: 'Custom notes for GitHub Release (optional)'
        required: false
        type: string
  push:
    tags:
      - 'v*' # Dispara em tags como v1.0, v1.0.1 (usualmente para releases de produção ou beta)

jobs:
  build_and_release:
    name: "Build, Sign, and Release App"
    if: github.repository == 'luizcmarin/catsverse' # Proteção para o repositório correto
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Aumentado um pouco para acomodar todas as etapas

    permissions:
      contents: write # Para criar release no GitHub e fazer upload de assets
      id-token: write # Necessário para autenticação OIDC com Google Cloud (se usar Workload Identity Federation no futuro)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Para histórico completo, útil para changelogs automáticos no futuro

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 21

      - name: Setup Gradle and Cache Dependencies
        uses: gradle/actions/setup-gradle@v4
        with:
          # Argumentos para o Gradle (opcional, mas pode ser útil)
          # arguments: --no-daemon
          build-scan-publish: ${{ github.event_name == 'workflow_dispatch' }} # Publica build scan apenas em disparos manuais (para depuração)
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Cache de dependências do Gradle (gerenciado pela action setup-gradle)
          # cache-read-only: ${{ github.ref != 'refs/heads/main' }} # Exemplo: só escreve no cache em pushes para main

      # --- Seção de Assinatura do App Bundle (AAB) ---
      - name: Decode Keystore
        # Roda se SIGNING_KEYSTORE_BASE64 estiver definido. Adicione uma verificação mais robusta se necessário.
        if: ${{ secrets.SIGNING_KEYSTORE_BASE64 != '' && secrets.SIGNING_KEYSTORE_BASE64 != null }}
        env:
          SIGNING_KEYSTORE_BASE64_SECRET: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
          KEYSTORE_PATH_ENV: "${{ github.workspace }}/release-catsverse.jks"
        run: |
          echo "Decoding keystore..."
          echo $SIGNING_KEYSTORE_BASE64_SECRET | base64 --decode > $KEYSTORE_PATH_ENV
          echo "SIGNING_STORE_FILE_PATH_OUTPUT=$KEYSTORE_PATH_ENV" >> $GITHUB_ENV
          echo "Keystore decoded to $KEYSTORE_PATH_ENV"

      - name: Set Signing Environment Variables for Gradle
        if: ${{ env.SIGNING_STORE_FILE_PATH_OUTPUT != '' && secrets.SIGNING_KEY_ALIAS != '' && secrets.SIGNING_KEY_PASSWORD != '' && secrets.SIGNING_STORE_PASSWORD != '' }}
        env:
          KEY_ALIAS_SECRET: ${{ secrets.SIGNING_KEY_ALIAS }}
          KEY_PASSWORD_SECRET: ${{ secrets.SIGNING_KEY_PASSWORD }}
          STORE_PASSWORD_SECRET: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          echo "Setting signing environment variables for Gradle..."
          echo "CATSVERSE_RELEASE_STORE_FILE=${{ env.SIGNING_STORE_FILE_PATH_OUTPUT }}" >> $GITHUB_ENV
          echo "CATSVERSE_RELEASE_STORE_PASSWORD=${STORE_PASSWORD_SECRET}" >> $GITHUB_ENV
          echo "CATSVERSE_RELEASE_KEY_ALIAS=${KEY_ALIAS_SECRET}" >> $GITHUB_ENV
          echo "CATSVERSE_RELEASE_KEY_PASSWORD=${KEY_PASSWORD_SECRET}" >> $GITHUB_ENV
          echo "Signing environment variables set."
          # Adicione uma verificação aqui para falhar se as variáveis não foram setadas e a assinatura é esperada
          if [ -z "$CATSVERSE_RELEASE_STORE_FILE" ]; then echo "Error: Signing store file not set."; exit 1; fi
      # --- Fim da Seção de Assinatura ---

      - name: Build Signed App Bundle (AAB)
        id: build_aab
        run: |
          ./gradlew :app:bundleRelease
          # Define o caminho do AAB e do mapping file como outputs da etapa
          echo "aab_path=app/build/outputs/bundle/release/app-release.aab" >> $GITHUB_OUTPUT
          if [ -f "app/build/outputs/mapping/release/mapping.txt" ]; then
            echo "mapping_path=app/build/outputs/mapping/release/mapping.txt" >> $GITHUB_OUTPUT
          else
            echo "mapping_path=" >> $GITHUB_OUTPUT # Define como vazio se não existir
          fi
        # Adicione uma verificação aqui: se a assinatura era esperada mas o AAB não foi gerado ou não é assinado, falhe.
        # Isso é mais complexo e pode envolver ferramentas como `apksigner`.
        # Por agora, confiamos que o Gradle falhará se a configuração de assinatura estiver incorreta.

      - name: Determine Google Play Track
        id: play_track_logic
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "track=${{ github.event.inputs.play_track }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == v* ]]; then
            # Lógica para determinar a faixa baseada na tag, ex: 'beta' se a tag for 'vX.Y.Z-beta', senão 'production'
            # Esta é uma lógica de exemplo, ajuste conforme sua estratégia de tags
            if [[ "${{ github.ref_name }}" == *beta* ]]; then
              echo "track=beta" >> $GITHUB_OUTPUT
            elif [[ "${{ github.ref_name }}" == *alpha* ]]; then
              echo "track=alpha" >> $GITHUB_OUTPUT
            else
              echo "track=production" >> $GITHUB_OUTPUT # Padrão para tags 'v*' sem sufixo específico
            fi
          else
            echo "track=internal" >> $GITHUB_OUTPUT # Padrão se não for dispatch nem tag 'v*' (improvável com os triggers atuais)
          fi

      - name: Upload AAB to Google Play
        # Só executa se tivermos um AAB e um service account JSON
        if: ${{ steps.build_aab.outputs.aab_path != '' && secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON != '' }}
        uses: r0adkll/upload-google-play@v1.0.19 # Use a versão mais recente da action
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.marin.catsverse # SUBSTITUA PELO SEU package name
          releaseFiles: ${{ steps.build_aab.outputs.aab_path }}
          mappingFile: ${{ steps.build_aab.outputs.mapping_path }} # Envia o mapping.txt se existir
          track: ${{ steps.play_track_logic.outputs.track }}
          # userFraction: 0.5 # Para staged rollouts (ex: 0.5 para 50%)
          status: completed # Ou 'draft' para revisar no Play Console antes de lançar
          # whatsNewDirectory: path/to/your/playstore_changelogs/ # Para notas de release por idioma
          # Se você quiser que o nome do release no Play Console seja a tag:
          # name: ${{ github.ref_name }}

      - name: Determine Release Notes for GitHub
        id: github_release_notes
        run: |
          NOTES=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.git_release_notes }}" ]; then
            NOTES="${{ github.event.inputs.git_release_notes }}"
          elif [ -n "${{ github.ref_name }}" ]; then
            NOTES="Release for tag ${{ github.ref_name }}. Deployed to Google Play on track: ${{ steps.play_track_logic.outputs.track }}."
            if [ -z "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" ]; then
              NOTES="$NOTES (App Bundle is NOT signed by CI - Check signing configuration if this was unintended for Play Store release)"
            fi
          else
            NOTES="Development build. Deployed to Google Play on track: ${{ steps.play_track_logic.outputs.track }}."
          fi
          # Multiline notes need careful handling for GITHUB_OUTPUT, see action docs or use intermediate files.
          # For simplicity, keeping it as a single line for now.
          echo "body=$(echo $NOTES)" >> $GITHUB_OUTPUT


      - name: Create GitHub Release
        # Só cria se tivermos uma tag ou se for um disparo manual que se destina a criar um release
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch' }}
        id: create_gh_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # Usa a tag do evento push; para workflow_dispatch, pode precisar de um input
          release_name: "Release ${{ github.ref_name || format('Manual Build {0}', github.run_id) }} (Track: ${{ steps.play_track_logic.outputs.track }})"
          body: ${{ steps.github_release_notes.outputs.body }}
          draft: true # Mantenha como draft para revisão
          prerelease: ${{ steps.play_track_logic.outputs.track != 'production' }} # Marca como pré-release se não for para produção

      - name: Upload AAB to GitHub Release
        if: ${{ steps.create_gh_release.outputs.upload_url != '' && steps.build_aab.outputs.aab_path != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ${{ steps.build_aab.outputs.aab_path }}
          asset_name: catsverse-${{ github.ref_name || github.run_id }}.aab
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Mapping File to GitHub Release (Optional)
        if: ${{ steps.create_gh_release.outputs.upload_url != '' && steps.build_aab.outputs.mapping_path != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
          asset_path: ${{ steps.build_aab.outputs.mapping_path }}
          asset_name: mapping-${{ github.ref_name || github.run_id }}.txt
          asset_content_type: text/plain

